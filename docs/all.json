{"shell":true,"revision":"1445303d90f7e6472a83175dac4970301dc34a80","objects":[{"type":"impl","source":"lib/rai_ex/block.ex:133","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Collectable.RaiEx.Block","id":"Collectable.RaiEx.Block"},{"type":"impl","source":"lib/rai_ex/block.ex:119","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Poison.Encoder.RaiEx.Block","id":"Poison.Encoder.RaiEx.Block"},{"type":null,"source":"lib/rai_ex.ex:2","object_type":"ModuleObject","moduledoc":"This module contains the definitions of all the RaiBlocks node RPC calls.\n\n## Usage\n\nAll functions in this module return tuples. The best way to extract the\nreturn values is with pattern matching. Keep in mind that the values are all\n*encoded as strings*. If an rpc call *times out*, it will be re-sent after a short\ndelay.\n\n### Examples\n\n    {:ok, %{\"wallet\" => wallet}} = RaiEx.wallet_create()\n\n    {:ok, %{\"frontier\" => frontier}} = RaiEx.account_info(account)\n\n    # All functions come with two matching clauses\n    {:ok, %{\"frontiers\" => frontiers}} = RaiEx.accounts_frontiers([account], 1)\n    {:ok, %{\"frontiers\" => frontiers}} = RaiEx.accounts_frontiers(accounts: [account], count: 1)\n\n    # Node is unreachable\n    iex> RaiEx.wallet_create()\n    {:error, :econnrefused}\n\n    # RPC returns an error\n    iex> RaiEx.wallet_create()\n    {:error, reason}\n\n","module":"Elixir.RaiEx","id":"RaiEx"},{"type":null,"source":"lib/rai_ex/block.ex:2","object_type":"ModuleObject","moduledoc":"The block struct and associated functions.\n\n## Fields\n\n  * `type` - the block type, default: \"send\"\n  * `previous` - the previous block hash, e.g. 9F1D53E732E48F25F94711D5B22086778278624F715D9B2BEC8FB81134E7C904\n  * `destination` - the destination address, e.g. xrb_34bmpi65zr967cdzy4uy4twu7mqs9nrm53r1penffmuex6ruqy8nxp7ms1h1\n  * `balance` - the amount to send, measured in RAW\n  * `work` - the proof of work, e.g. \"266063092558d903\"\n  * `signature` - the signed block digest/hash\n  * `hash` - the block digest/hash\n  * `source` - the source hash for a receive block\n  * `representative` - the representative for an open block\n  * `account` - the account for an open block\n  * `state` - the state of the block, can be: `:unsent` or `:sent`\n\n## Send a block\n\n    alias RaiEx.{Block, Tools}\n\n    seed = \"9F1D53E732E48F25F94711D5B22086778278624F715D9B2BEC8FB81134E7C904\"\n\n    # Generate a private and public keypair from a wallet seed\n    {priv, pub} = Tools.seed_account!(seed, 0)\n\n    # Derives an \"xrb_\" address\n    address = Tools.create_account!(pub)\n    \n    # Get the previous block hash\n    {:ok, %{\"frontier\" => block_hash}} = RaiEx.account_info(address)\n\n    # Somewhat counterintuitively 'balance' refers to the new balance not the\n    # amount to be sent\n    block = %Block{\n      previous: block_hash,\n      destination: \"xrb_1aewtdjz8knar65gmu6xo5tmp7ijrur1fgtetua3mxqujh5z9m1r77fsrpqw\",\n      balance: 0\n    }\n\n    # Signs and broadcasts the block to the network\n    block |> Block.sign(priv, pub) |> Block.send()\n\nNow *all the funds* from the first account have been transferred to:\n\n`\"xrb_1aewtdjz8knar65gmu6xo5tmp7ijrur1fgtetua3mxqujh5z9m1r77fsrpqw\"`\n\n## Receive the most recent pending block\n\n    alias RaiEx.{Block, Tools}\n\n    seed = \"9F1D53E732E48F25F94711D5B22086778278624F715D9B2BEC8FB81134E7C904\"\n\n    # Generate a private and public keypair from a wallet seed\n    {priv, pub} = Tools.seed_account!(seed, 1)\n\n    # Derives an \"xrb_\" account\n    account = Tools.create_account!(pub)\n\n    {:ok, %{\"blocks\" => [block_hash]}} = RaiEx.pending(account, 1)\n    {:ok, %{\"frontier\" => frontier}} = RaiEx.account_info(account)\n\n    block = %Block{\n      type: \"receive\",\n      previous: frontier,\n      source: block_hash\n    }\n\n    block |> Block.sign(priv, pub) |> Block.process()\n\n## Open an account\n\n    alias RaiEx.{Block, Tools}\n\n    seed = \"9F1D53E732E48F25F94711D5B22086778278624F715D9B2BEC8FB81134E7C904\"\n    representative = \"xrb_3arg3asgtigae3xckabaaewkx3bzsh7nwz7jkmjos79ihyaxwphhm6qgjps4\"\n\n    # Generate a private and public keypair from a wallet seed\n    {priv_existing, pub_existing} = Tools.seed_account!(seed, 1)\n    {priv_new, pub_new} = Tools.seed_account!(seed, 2)\n\n    existing_account = Tools.create_account!(pub_existing)\n    new_account = Tools.create_account!(pub_new)\n\n    {:ok, %{\"frontier\" => block_hash, \"balance\" => balance}} = RaiEx.account_info(existing_account)\n\n    # Convert to number\n    {balance, \"\"} = Integer.parse(balance)\n\n    # We need to generate a send block to the new address\n    block = %Block{\n      previous: block_hash,\n      destination: new_account,\n      balance: balance\n    }\n\n    # Signs and broadcasts the block to the network\n    send_block = block |> Block.sign(priv_existing, pub_existing) |> Block.send()\n\n    # The open block\n    block = %Block{\n      type: \"open\",\n      account: new_account,\n      source: send_block.hash,\n      representative: representative\n    }\n\n    # Broadcast to the network\n    open_block = block |> Block.sign(priv_new, pub_new) |> Block.process()\n\n","module":"Elixir.RaiEx.Block","id":"RaiEx.Block"},{"type":null,"source":"lib/rai_ex/rpc.ex:2","object_type":"ModuleObject","moduledoc":"This module provides macros for generating rpc-invoking functions.\n","module":"Elixir.RaiEx.RPC","id":"RaiEx.RPC"},{"type":null,"source":"lib/rai_ex/tools.ex:2","object_type":"ModuleObject","moduledoc":"This module provides convenience functions for working with a RaiBlocks node.\n","module":"Elixir.RaiEx.Tools","id":"RaiEx.Tools"},{"type":null,"source":"lib/rai_ex/tools/base_32.ex:2","object_type":"ModuleObject","moduledoc":"This module provides functions for dealing with encoding and decoding, RaiDice base32.\n","module":"Elixir.RaiEx.Tools.Base32","id":"RaiEx.Tools.Base32"},{"type":null,"source":"lib/rai_ex/tools/validator.ex:2","object_type":"ModuleObject","moduledoc":"Provides functionality for run-time validation of rpc types.\n","module":"Elixir.RaiEx.Tools.Validator","id":"RaiEx.Tools.Validator"},{"type":"def","source":"lib/rai_ex/block.ex:133","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__impl__","module_id":"Collectable.RaiEx.Block","id":"__impl__/1","doc":false,"arity":1},{"type":"def","source":"lib/rai_ex/block.ex:134","signature":[["original",[],null]],"object_type":"FunctionObject","name":"into","module_id":"Collectable.RaiEx.Block","id":"into/1","doc":null,"arity":1},{"type":"def","source":"lib/rai_ex/block.ex:119","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__impl__","module_id":"Poison.Encoder.RaiEx.Block","id":"__impl__/1","doc":false,"arity":1},{"type":"def","source":"lib/rai_ex/block.ex:119","signature":[["struct",[],null],["options",[],null]],"object_type":"FunctionObject","name":"encode","module_id":"Poison.Encoder.RaiEx.Block","id":"encode/2","doc":null,"arity":2},{"type":"def","source":"lib/rai_ex.ex:51","signature":[["account",[],null]],"object_type":"FunctionObject","name":"account_balance","module_id":"RaiEx","id":"account_balance/1","doc":"Returns how many RAW is owned and how many have not yet been received by `account`.\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:58","signature":[["account",[],null]],"object_type":"FunctionObject","name":"account_block_count","module_id":"RaiEx","id":"account_block_count/1","doc":"Gets the number of blocks for a specific `account`.\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:73","signature":[["wallet",[],null]],"object_type":"FunctionObject","name":"account_create","module_id":"RaiEx","id":"account_create/1","doc":"Creates a new account, insert next deterministic key in `wallet`.\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:80","signature":[["key",[],null]],"object_type":"FunctionObject","name":"account_get","module_id":"RaiEx","id":"account_get/1","doc":"Get account number for the `public key`.\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:87","signature":[["list",[],"Elixir"]],"object_type":"FunctionObject","name":"account_history","module_id":"RaiEx","id":"account_history/1","doc":"Reports send/receive information for an `account`.\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:90","signature":[["account",[],null],["count",[],null]],"object_type":"FunctionObject","name":"account_history","module_id":"RaiEx","id":"account_history/2","doc":null,"arity":2},{"type":"def","source":"lib/rai_ex.ex:65","signature":[["account",[],null]],"object_type":"FunctionObject","name":"account_info","module_id":"RaiEx","id":"account_info/1","doc":"Returns frontier, open block, change representative block, balance,\nlast modified timestamp from local database & block count for `account`.\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:113","signature":[["account",[],null]],"object_type":"FunctionObject","name":"account_key","module_id":"RaiEx","id":"account_key/1","doc":"Get the `public key` for `account`.\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:95","signature":[["wallet",[],null]],"object_type":"FunctionObject","name":"account_list","module_id":"RaiEx","id":"account_list/1","doc":"Lists all the accounts inside `wallet`.\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:102","signature":[["list",[],"Elixir"]],"object_type":"FunctionObject","name":"account_move","module_id":"RaiEx","id":"account_move/1","doc":"Moves accounts from `source` to `wallet`.\n\nNode must have *enable_control* set to 'true'\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:107","signature":[["wallet",[],null],["source",[],null],["accounts",[],null]],"object_type":"FunctionObject","name":"account_move","module_id":"RaiEx","id":"account_move/3","doc":null,"arity":3},{"type":"def","source":"lib/rai_ex.ex:120","signature":[["list",[],"Elixir"]],"object_type":"FunctionObject","name":"account_remove","module_id":"RaiEx","id":"account_remove/1","doc":"Remove `account` from `wallet`.\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:123","signature":[["wallet",[],null],["account",[],null]],"object_type":"FunctionObject","name":"account_remove","module_id":"RaiEx","id":"account_remove/2","doc":null,"arity":2},{"type":"def","source":"lib/rai_ex.ex:128","signature":[["account",[],null]],"object_type":"FunctionObject","name":"account_representative","module_id":"RaiEx","id":"account_representative/1","doc":"Returns the representative for `account`.\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:135","signature":[["list",[],"Elixir"]],"object_type":"FunctionObject","name":"account_representative_set","module_id":"RaiEx","id":"account_representative_set/1","doc":"Sets the representative for `account` in `wallet`.\n\nNode must have *enable_control* set to 'true'\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:140","signature":[["wallet",[],null],["account",[],null],["representative",[],null]],"object_type":"FunctionObject","name":"account_representative_set","module_id":"RaiEx","id":"account_representative_set/3","doc":null,"arity":3},{"type":"def","source":"lib/rai_ex.ex:146","signature":[["account",[],null]],"object_type":"FunctionObject","name":"account_weight","module_id":"RaiEx","id":"account_weight/1","doc":"Returns the voting weight for `account`.\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:153","signature":[["accounts",[],null]],"object_type":"FunctionObject","name":"accounts_balances","module_id":"RaiEx","id":"accounts_balances/1","doc":"Returns how many RAW is owned and how many have not yet been received by accounts list.\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:160","signature":[["accounts",[],null]],"object_type":"FunctionObject","name":"accounts_frontiers","module_id":"RaiEx","id":"accounts_frontiers/1","doc":"Returns a list of pairs of account and block hash representing the head block for `accounts`.\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:167","signature":[["list",[],"Elixir"]],"object_type":"FunctionObject","name":"accounts_pending","module_id":"RaiEx","id":"accounts_pending/1","doc":"Returns a list of block hashes which have not yet been received by these `accounts`.\n\nOptional `threshold`, only returns hashes with amounts >= threshold.\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:172","signature":[["accounts",[],null],["count",[],null]],"object_type":"FunctionObject","name":"accounts_pending","module_id":"RaiEx","id":"accounts_pending/2","doc":null,"arity":2},{"type":"def","source":"lib/rai_ex.ex:177","signature":[["accounts",[],null],["count",[],null],["accounts",[],null],["count",[],null],["threshold",[],null]],"object_type":"FunctionObject","name":"accounts_pending","module_id":"RaiEx","id":"accounts_pending/5","doc":null,"arity":5},{"type":"def","source":"lib/rai_ex.ex:186","signature":[],"object_type":"FunctionObject","name":"available_supply","module_id":"RaiEx","id":"available_supply/0","doc":null,"arity":0},{"type":"def","source":"lib/rai_ex.ex:183","signature":[["list",[],"Elixir"]],"object_type":"FunctionObject","name":"available_supply","module_id":"RaiEx","id":"available_supply/1","doc":"Returns how many rai are in the public supply.\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:189","signature":[["hash",[],null]],"object_type":"FunctionObject","name":"block","module_id":"RaiEx","id":"block/1","doc":"Retrieves a json representation of `block`.\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:210","signature":[["hash",[],null]],"object_type":"FunctionObject","name":"block_account","module_id":"RaiEx","id":"block_account/1","doc":"Returns the `account` containing the `block`.\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:220","signature":[],"object_type":"FunctionObject","name":"block_count","module_id":"RaiEx","id":"block_count/0","doc":null,"arity":0},{"type":"def","source":"lib/rai_ex.ex:217","signature":[["list",[],"Elixir"]],"object_type":"FunctionObject","name":"block_count","module_id":"RaiEx","id":"block_count/1","doc":"Reports the number of blocks in the ledger and unchecked synchronizing blocks.\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:226","signature":[],"object_type":"FunctionObject","name":"block_count_type","module_id":"RaiEx","id":"block_count_type/0","doc":null,"arity":0},{"type":"def","source":"lib/rai_ex.ex:223","signature":[["list",[],"Elixir"]],"object_type":"FunctionObject","name":"block_count_type","module_id":"RaiEx","id":"block_count_type/1","doc":"Reports the number of blocks in the ledger by type (send, receive, open, change).\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:196","signature":[["hashes",[],null]],"object_type":"FunctionObject","name":"blocks","module_id":"RaiEx","id":"blocks/1","doc":"Retrieves a json representations of multiple `blocks`.\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:203","signature":[["hashes",[],null]],"object_type":"FunctionObject","name":"blocks_info","module_id":"RaiEx","id":"blocks_info/1","doc":"Retrieves a json representations of `blocks` with transaction `amount` & block `account`.\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:229","signature":[["list",[],"Elixir"]],"object_type":"FunctionObject","name":"bootstrap","module_id":"RaiEx","id":"bootstrap/1","doc":"Initialize bootstrap to specific IP address and `port`.\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:232","signature":[["address",[],null],["port",[],null]],"object_type":"FunctionObject","name":"bootstrap","module_id":"RaiEx","id":"bootstrap/2","doc":null,"arity":2},{"type":"def","source":"lib/rai_ex.ex:240","signature":[],"object_type":"FunctionObject","name":"bootstrap_any","module_id":"RaiEx","id":"bootstrap_any/0","doc":null,"arity":0},{"type":"def","source":"lib/rai_ex.ex:237","signature":[["list",[],"Elixir"]],"object_type":"FunctionObject","name":"bootstrap_any","module_id":"RaiEx","id":"bootstrap_any/1","doc":"Initialize multi-connection bootstrap to random peers.\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:243","signature":[["list",[],"Elixir"]],"object_type":"FunctionObject","name":"chain","module_id":"RaiEx","id":"chain/1","doc":"Returns a list of block hashes in the account chain starting at `block` up to `count`.\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:246","signature":[["block",[],null],["count",[],null]],"object_type":"FunctionObject","name":"chain","module_id":"RaiEx","id":"chain/2","doc":null,"arity":2},{"type":"def","source":"lib/rai_ex.ex:44","signature":[["\\\\",[],[["url",[],null],"http://localhost:7076"]]],"object_type":"FunctionObject","name":"connect","module_id":"RaiEx","id":"connect/1","doc":"Used to connect to a different endpoint.\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:251","signature":[["account",[],null]],"object_type":"FunctionObject","name":"delegators","module_id":"RaiEx","id":"delegators/1","doc":"Returns a list of pairs of delegator names given `account` a representative and its balance.\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:258","signature":[["account",[],null]],"object_type":"FunctionObject","name":"delegators_count","module_id":"RaiEx","id":"delegators_count/1","doc":"Get number of delegators for a specific representative `account`.\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:265","signature":[["list",[],"Elixir"]],"object_type":"FunctionObject","name":"deterministic_key","module_id":"RaiEx","id":"deterministic_key/1","doc":"Derive deterministic keypair from `seed` based on `index`.\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:268","signature":[["seed",[],null],["index",[],null]],"object_type":"FunctionObject","name":"deterministic_key","module_id":"RaiEx","id":"deterministic_key/2","doc":null,"arity":2},{"type":"def","source":"lib/rai_ex.ex:284","signature":[],"object_type":"FunctionObject","name":"frontier_count","module_id":"RaiEx","id":"frontier_count/0","doc":null,"arity":0},{"type":"def","source":"lib/rai_ex.ex:281","signature":[["list",[],"Elixir"]],"object_type":"FunctionObject","name":"frontier_count","module_id":"RaiEx","id":"frontier_count/1","doc":"Reports the number of accounts in the ledger.\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:273","signature":[["list",[],"Elixir"]],"object_type":"FunctionObject","name":"frontiers","module_id":"RaiEx","id":"frontiers/1","doc":"Returns a list of pairs of account and block hash representing the head block starting at account up to count.\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:276","signature":[["account",[],null],["count",[],null]],"object_type":"FunctionObject","name":"frontiers","module_id":"RaiEx","id":"frontiers/2","doc":null,"arity":2},{"type":"def","source":"lib/rai_ex.ex:287","signature":[["list",[],"Elixir"]],"object_type":"FunctionObject","name":"history","module_id":"RaiEx","id":"history/1","doc":"Reports send/receive information for a chain of blocks.\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:290","signature":[["hash",[],null],["count",[],null]],"object_type":"FunctionObject","name":"history","module_id":"RaiEx","id":"history/2","doc":null,"arity":2},{"type":"def","source":"lib/rai_ex.ex:337","signature":[["list",[],"Elixir"]],"object_type":"FunctionObject","name":"keepalive","module_id":"RaiEx","id":"keepalive/1","doc":"Tells the node to send a keepalive packet to address:port.\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:340","signature":[["address",[],null],["port",[],null]],"object_type":"FunctionObject","name":"keepalive","module_id":"RaiEx","id":"keepalive/2","doc":null,"arity":2},{"type":"def","source":"lib/rai_ex.ex:348","signature":[],"object_type":"FunctionObject","name":"key_create","module_id":"RaiEx","id":"key_create/0","doc":null,"arity":0},{"type":"def","source":"lib/rai_ex.ex:345","signature":[["list",[],"Elixir"]],"object_type":"FunctionObject","name":"key_create","module_id":"RaiEx","id":"key_create/1","doc":"Generates an `adhoc random keypair`\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:351","signature":[["key",[],null]],"object_type":"FunctionObject","name":"key_expand","module_id":"RaiEx","id":"key_expand/1","doc":"Derive public key and account number from `private key`.\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:309","signature":[["amount",[],null]],"object_type":"FunctionObject","name":"krai_from_raw","module_id":"RaiEx","id":"krai_from_raw/1","doc":"Divide a raw amount down by the krai ratio.\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:316","signature":[["amount",[],null]],"object_type":"FunctionObject","name":"krai_to_raw","module_id":"RaiEx","id":"krai_to_raw/1","doc":"Multiply an krai amount by the krai ratio.\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:295","signature":[["amount",[],null]],"object_type":"FunctionObject","name":"mrai_from_raw","module_id":"RaiEx","id":"mrai_from_raw/1","doc":"Divide a raw amount down by the Mrai ratio.\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:302","signature":[["amount",[],null]],"object_type":"FunctionObject","name":"mrai_to_raw","module_id":"RaiEx","id":"mrai_to_raw/1","doc":"Multiply an Mrai amount by the Mrai ratio.\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:687","signature":[["list",[],"Elixir"]],"object_type":"FunctionObject","name":"password_change","module_id":"RaiEx","id":"password_change/1","doc":"Changes the password for wallet to password.\n\n*enable_control* must be set to true\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:692","signature":[["wallet",[],null],["password",[],null]],"object_type":"FunctionObject","name":"password_change","module_id":"RaiEx","id":"password_change/2","doc":null,"arity":2},{"type":"def","source":"lib/rai_ex.ex:697","signature":[["list",[],"Elixir"]],"object_type":"FunctionObject","name":"password_enter","module_id":"RaiEx","id":"password_enter/1","doc":"Enters the password in to wallet.\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:700","signature":[["wallet",[],null],["password",[],null]],"object_type":"FunctionObject","name":"password_enter","module_id":"RaiEx","id":"password_enter/2","doc":null,"arity":2},{"type":"def","source":"lib/rai_ex.ex:705","signature":[["wallet",[],null]],"object_type":"FunctionObject","name":"password_valid","module_id":"RaiEx","id":"password_valid/1","doc":"Checks whether the password entered for wallet is valid.\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:358","signature":[["wallet",[],null]],"object_type":"FunctionObject","name":"payment_begin","module_id":"RaiEx","id":"payment_begin/1","doc":"Begin a new payment session. Searches wallet for an account that's\nmarked as available and has a 0 balance. If one is found, the account\nnumber is returned and is marked as unavailable. If no account is found,\na new account is created, placed in the wallet, and returned.\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:375","signature":[["list",[],"Elixir"]],"object_type":"FunctionObject","name":"payment_end","module_id":"RaiEx","id":"payment_end/1","doc":"End a payment session. Marks the account as available for use in a payment session.\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:378","signature":[["account",[],null],["wallet",[],null]],"object_type":"FunctionObject","name":"payment_end","module_id":"RaiEx","id":"payment_end/2","doc":null,"arity":2},{"type":"def","source":"lib/rai_ex.ex:368","signature":[["wallet",[],null]],"object_type":"FunctionObject","name":"payment_init","module_id":"RaiEx","id":"payment_init/1","doc":"Marks all accounts in wallet as available for being used as a payment session.\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:383","signature":[["list",[],"Elixir"]],"object_type":"FunctionObject","name":"payment_wait","module_id":"RaiEx","id":"payment_wait/1","doc":"Wait for payment of 'amount' to arrive in 'account' or until 'timeout' milliseconds have elapsed.\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:386","signature":[["account",[],null],["amount",[],null],["timeout",[],null]],"object_type":"FunctionObject","name":"payment_wait","module_id":"RaiEx","id":"payment_wait/3","doc":null,"arity":3},{"type":"def","source":"lib/rai_ex.ex:516","signature":[],"object_type":"FunctionObject","name":"peers","module_id":"RaiEx","id":"peers/0","doc":null,"arity":0},{"type":"def","source":"lib/rai_ex.ex:513","signature":[["list",[],"Elixir"]],"object_type":"FunctionObject","name":"peers","module_id":"RaiEx","id":"peers/1","doc":"Returns a list of pairs of peer IPv6:port and its node network version.\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:519","signature":[["list",[],"Elixir"]],"object_type":"FunctionObject","name":"pending","module_id":"RaiEx","id":"pending/1","doc":"Returns a list of pending block hashes with amount more or equal to threshold.\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:522","signature":[["account",[],null],["count",[],null]],"object_type":"FunctionObject","name":"pending","module_id":"RaiEx","id":"pending/2","doc":null,"arity":2},{"type":"def","source":"lib/rai_ex.ex:530","signature":[["account",[],null],["count",[],null],["account",[],null],["count",[],null],["threshold",[],null]],"object_type":"FunctionObject","name":"pending","module_id":"RaiEx","id":"pending/5","doc":null,"arity":5},{"type":"def","source":"lib/rai_ex.ex:536","signature":[["hash",[],null]],"object_type":"FunctionObject","name":"pending_exists","module_id":"RaiEx","id":"pending_exists/1","doc":"Check whether block is pending by hash.\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:802","signature":[["json",[],null],["\\\\",[],[["opts",[],null],[]]],["\\\\",[],[["tries",[],null],3]],["\\\\",[],[["prev_reason",[],null],["error","unknown"]]]],"object_type":"FunctionObject","name":"post_json_rpc","module_id":"RaiEx","id":"post_json_rpc/4","doc":"Posts some json to the RaiBlocks rpc. If the POST is unsuccessful,\nit is re-sent `@retry_count` many times with a delay of `@wait_time`\nbetween retries. Callback implementation for `RaiEx.RPC`.\n\n## Examples\n\n    iex> post_json_rpc(%{\"action\" => \"wallet_create\"})\n    {:ok, %{\"wallet\" => \"0000000000000000\"}}\n\n    iex> post_json_rpc(%{\"action\" => \"timeout\"})\n    {:error, reason}\n\n","arity":4},{"type":"def","source":"lib/rai_ex.ex:392","signature":[["block",[],null]],"object_type":"FunctionObject","name":"process","module_id":"RaiEx","id":"process/1","doc":"Publish `block` to the network.\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:323","signature":[["amount",[],null]],"object_type":"FunctionObject","name":"rai_from_raw","module_id":"RaiEx","id":"rai_from_raw/1","doc":"Divide a raw amount down by the rai ratio.\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:330","signature":[["amount",[],null]],"object_type":"FunctionObject","name":"rai_to_raw","module_id":"RaiEx","id":"rai_to_raw/1","doc":"Multiply an rai amount by the rai ratio.\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:399","signature":[["list",[],"Elixir"]],"object_type":"FunctionObject","name":"receive","module_id":"RaiEx","id":"receive/1","doc":"Receive pending block for account in wallet\n\n*enable_control* must be set to true\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:404","signature":[["wallet",[],null],["account",[],null],["block",[],null]],"object_type":"FunctionObject","name":"receive","module_id":"RaiEx","id":"receive/3","doc":null,"arity":3},{"type":"def","source":"lib/rai_ex.ex:415","signature":[],"object_type":"FunctionObject","name":"receive_minimum","module_id":"RaiEx","id":"receive_minimum/0","doc":null,"arity":0},{"type":"def","source":"lib/rai_ex.ex:410","signature":[["list",[],"Elixir"]],"object_type":"FunctionObject","name":"receive_minimum","module_id":"RaiEx","id":"receive_minimum/1","doc":"Returns receive minimum for node.\n\n*enable_control* must be set to true\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:418","signature":[["amount",[],null]],"object_type":"FunctionObject","name":"receive_minimum_set","module_id":"RaiEx","id":"receive_minimum_set/1","doc":"Set `amount` as new receive minimum for node until restart\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:428","signature":[],"object_type":"FunctionObject","name":"representatives","module_id":"RaiEx","id":"representatives/0","doc":null,"arity":0},{"type":"def","source":"lib/rai_ex.ex:425","signature":[["list",[],"Elixir"]],"object_type":"FunctionObject","name":"representatives","module_id":"RaiEx","id":"representatives/1","doc":"Returns a list of pairs of representative and its voting weight.\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:448","signature":[["hash",[],null]],"object_type":"FunctionObject","name":"republish","module_id":"RaiEx","id":"republish/1","doc":"Additionally rebroadcast source chain blocks for receive/open up to `sources` depth.\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:458","signature":[["hash",[],null],["hash",[],null],["sources",[],null]],"object_type":"FunctionObject","name":"republish","module_id":"RaiEx","id":"republish/3","doc":null,"arity":3},{"type":"def","source":"lib/rai_ex.ex:463","signature":[["wallet",[],null]],"object_type":"FunctionObject","name":"search_pending","module_id":"RaiEx","id":"search_pending/1","doc":"Tells the node to look for pending blocks for any account in `wallet`.\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:473","signature":[],"object_type":"FunctionObject","name":"search_pending_all","module_id":"RaiEx","id":"search_pending_all/0","doc":null,"arity":0},{"type":"def","source":"lib/rai_ex.ex:470","signature":[["list",[],"Elixir"]],"object_type":"FunctionObject","name":"search_pending_all","module_id":"RaiEx","id":"search_pending_all/1","doc":"Tells the node to look for pending blocks for any account in all available wallets.\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:476","signature":[["list",[],"Elixir"]],"object_type":"FunctionObject","name":"send","module_id":"RaiEx","id":"send/1","doc":"Send `amount` from `source` in `wallet` to destination\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:479","signature":[["wallet",[],null],["source",[],null],["destination",[],null],["amount",[],null]],"object_type":"FunctionObject","name":"send","module_id":"RaiEx","id":"send/4","doc":null,"arity":4},{"type":"def","source":"lib/rai_ex.ex:489","signature":[],"object_type":"FunctionObject","name":"stop","module_id":"RaiEx","id":"stop/0","doc":null,"arity":0},{"type":"def","source":"lib/rai_ex.ex:486","signature":[["list",[],"Elixir"]],"object_type":"FunctionObject","name":"stop","module_id":"RaiEx","id":"stop/1","doc":"*enable_control* must be set to true\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:499","signature":[["list",[],"Elixir"]],"object_type":"FunctionObject","name":"successors","module_id":"RaiEx","id":"successors/1","doc":"Returns a list of block hashes in the account chain ending at block up to count.\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:502","signature":[["block",[],null],["count",[],null]],"object_type":"FunctionObject","name":"successors","module_id":"RaiEx","id":"successors/2","doc":null,"arity":2},{"type":"def","source":"lib/rai_ex.ex:543","signature":[["count",[],null]],"object_type":"FunctionObject","name":"unchecked","module_id":"RaiEx","id":"unchecked/1","doc":"Returns a list of pairs of unchecked synchronizing block hash and its json representation up to count.\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:555","signature":[],"object_type":"FunctionObject","name":"unchecked_clear","module_id":"RaiEx","id":"unchecked_clear/0","doc":null,"arity":0},{"type":"def","source":"lib/rai_ex.ex:550","signature":[["list",[],"Elixir"]],"object_type":"FunctionObject","name":"unchecked_clear","module_id":"RaiEx","id":"unchecked_clear/1","doc":"Clear unchecked synchronizing blocks.\n\n*enable_control* must be set to true\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:558","signature":[["hash",[],null]],"object_type":"FunctionObject","name":"unchecked_get","module_id":"RaiEx","id":"unchecked_get/1","doc":"Retrieves a json representation of unchecked synchronizing block by hash.\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:565","signature":[["list",[],"Elixir"]],"object_type":"FunctionObject","name":"unchecked_keys","module_id":"RaiEx","id":"unchecked_keys/1","doc":"Retrieves unchecked database keys, blocks hashes & a json representations of unchecked pending blocks starting from key up to count.\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:568","signature":[["key",[],null],["count",[],null]],"object_type":"FunctionObject","name":"unchecked_keys","module_id":"RaiEx","id":"unchecked_keys/2","doc":null,"arity":2},{"type":"def","source":"lib/rai_ex.ex:492","signature":[["account",[],null]],"object_type":"FunctionObject","name":"validate_account_number","module_id":"RaiEx","id":"validate_account_number/1","doc":"Check whether account is a valid account number.\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:510","signature":[],"object_type":"FunctionObject","name":"version","module_id":"RaiEx","id":"version/0","doc":null,"arity":0},{"type":"def","source":"lib/rai_ex.ex:507","signature":[["list",[],"Elixir"]],"object_type":"FunctionObject","name":"version","module_id":"RaiEx","id":"version/1","doc":"Retrieves node versions.\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:573","signature":[["list",[],"Elixir"]],"object_type":"FunctionObject","name":"wallet_add","module_id":"RaiEx","id":"wallet_add/1","doc":"Add an adhoc private key key to wallet.\n\n*enable_control* must be set to true\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:578","signature":[["wallet",[],null],["key",[],null]],"object_type":"FunctionObject","name":"wallet_add","module_id":"RaiEx","id":"wallet_add/2","doc":null,"arity":2},{"type":"def","source":"lib/rai_ex.ex:583","signature":[["wallet",[],null]],"object_type":"FunctionObject","name":"wallet_balance_total","module_id":"RaiEx","id":"wallet_balance_total/1","doc":"Returns the sum of all accounts balances in wallet.\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:590","signature":[["wallet",[],null]],"object_type":"FunctionObject","name":"wallet_balances","module_id":"RaiEx","id":"wallet_balances/1","doc":"Returns how many rai is owned and how many have not yet been received by all accounts in .\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:597","signature":[["list",[],"Elixir"]],"object_type":"FunctionObject","name":"wallet_change_seed","module_id":"RaiEx","id":"wallet_change_seed/1","doc":"Changes seed for wallet to seed.\n\n*enable_control* must be set to true\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:602","signature":[["wallet",[],null],["seed",[],null]],"object_type":"FunctionObject","name":"wallet_change_seed","module_id":"RaiEx","id":"wallet_change_seed/2","doc":null,"arity":2},{"type":"def","source":"lib/rai_ex.ex:607","signature":[["list",[],"Elixir"]],"object_type":"FunctionObject","name":"wallet_contains","module_id":"RaiEx","id":"wallet_contains/1","doc":"Check whether wallet contains account.\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:610","signature":[["wallet",[],null],["account",[],null]],"object_type":"FunctionObject","name":"wallet_contains","module_id":"RaiEx","id":"wallet_contains/2","doc":null,"arity":2},{"type":"def","source":"lib/rai_ex.ex:620","signature":[],"object_type":"FunctionObject","name":"wallet_create","module_id":"RaiEx","id":"wallet_create/0","doc":null,"arity":0},{"type":"def","source":"lib/rai_ex.ex:615","signature":[["list",[],"Elixir"]],"object_type":"FunctionObject","name":"wallet_create","module_id":"RaiEx","id":"wallet_create/1","doc":"Creates a new random wallet id.\n\n*enable_control* must be set to true\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:623","signature":[["wallet",[],null]],"object_type":"FunctionObject","name":"wallet_destroy","module_id":"RaiEx","id":"wallet_destroy/1","doc":"Destroys wallet and all contained accounts.\n\n*enable_control* must be set to true\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:632","signature":[["wallet",[],null]],"object_type":"FunctionObject","name":"wallet_export","module_id":"RaiEx","id":"wallet_export/1","doc":"Return a json representation of wallet.\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:639","signature":[["wallet",[],null]],"object_type":"FunctionObject","name":"wallet_frontiers","module_id":"RaiEx","id":"wallet_frontiers/1","doc":"Returns a list of pairs of account and block hash representing the head block starting\nfor accounts from wallet.\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:647","signature":[["list",[],"Elixir"]],"object_type":"FunctionObject","name":"wallet_pending","module_id":"RaiEx","id":"wallet_pending/1","doc":"Returns a list of pending block hashes with amount more or equal to threshold.\n\n*enable_control* must be set to true\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:652","signature":[["wallet",[],null],["count",[],null]],"object_type":"FunctionObject","name":"wallet_pending","module_id":"RaiEx","id":"wallet_pending/2","doc":null,"arity":2},{"type":"def","source":"lib/rai_ex.ex:662","signature":[["wallet",[],null],["count",[],null],["wallet",[],null],["count",[],null],["threshold",[],null]],"object_type":"FunctionObject","name":"wallet_pending","module_id":"RaiEx","id":"wallet_pending/5","doc":null,"arity":5},{"type":"def","source":"lib/rai_ex.ex:431","signature":[["wallet",[],null]],"object_type":"FunctionObject","name":"wallet_representative","module_id":"RaiEx","id":"wallet_representative/1","doc":"Returns the default representative for `wallet`.\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:438","signature":[["list",[],"Elixir"]],"object_type":"FunctionObject","name":"wallet_representative_set","module_id":"RaiEx","id":"wallet_representative_set/1","doc":"Sets the default representative for wallet.\n\n*enable_control* must be set to true\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:443","signature":[["wallet",[],null],["representative",[],null]],"object_type":"FunctionObject","name":"wallet_representative_set","module_id":"RaiEx","id":"wallet_representative_set/2","doc":null,"arity":2},{"type":"def","source":"lib/rai_ex.ex:668","signature":[["list",[],"Elixir"]],"object_type":"FunctionObject","name":"wallet_republish","module_id":"RaiEx","id":"wallet_republish/1","doc":"Rebroadcast blocks for accounts from wallet starting at frontier down to count to the network.\n\n*enable_control* must be set to true\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:673","signature":[["wallet",[],null],["count",[],null]],"object_type":"FunctionObject","name":"wallet_republish","module_id":"RaiEx","id":"wallet_republish/2","doc":null,"arity":2},{"type":"def","source":"lib/rai_ex.ex:678","signature":[["wallet",[],null]],"object_type":"FunctionObject","name":"wallet_work_get","module_id":"RaiEx","id":"wallet_work_get/1","doc":"Returns a list of pairs of account and work from wallet.\n\n*enable_control* must be set to true\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:712","signature":[["hash",[],null]],"object_type":"FunctionObject","name":"work_cancel","module_id":"RaiEx","id":"work_cancel/1","doc":"Stop generating work for block.\n\n*enable_control* must be set to true\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:721","signature":[["hash",[],null]],"object_type":"FunctionObject","name":"work_generate","module_id":"RaiEx","id":"work_generate/1","doc":"Generates work for block\n\n*enable_control* must be set to true\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:730","signature":[["list",[],"Elixir"]],"object_type":"FunctionObject","name":"work_get","module_id":"RaiEx","id":"work_get/1","doc":"Retrieves work for account in wallet.\n\n*enable_control* must be set to true\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:735","signature":[["wallet",[],null],["account",[],null]],"object_type":"FunctionObject","name":"work_get","module_id":"RaiEx","id":"work_get/2","doc":null,"arity":2},{"type":"def","source":"lib/rai_ex.ex:751","signature":[["list",[],"Elixir"]],"object_type":"FunctionObject","name":"work_peer_add","module_id":"RaiEx","id":"work_peer_add/1","doc":"Add specific IP address and port as work peer for node until restart.\n\n*enable_control* must be set to true\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:756","signature":[["address",[],null],["port",[],null]],"object_type":"FunctionObject","name":"work_peer_add","module_id":"RaiEx","id":"work_peer_add/2","doc":null,"arity":2},{"type":"def","source":"lib/rai_ex.ex:766","signature":[],"object_type":"FunctionObject","name":"work_peers","module_id":"RaiEx","id":"work_peers/0","doc":null,"arity":0},{"type":"def","source":"lib/rai_ex.ex:761","signature":[["list",[],"Elixir"]],"object_type":"FunctionObject","name":"work_peers","module_id":"RaiEx","id":"work_peers/1","doc":"Retrieves work peers.\n\n*enable_control* must be set to true\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:774","signature":[],"object_type":"FunctionObject","name":"work_peers_clear","module_id":"RaiEx","id":"work_peers_clear/0","doc":null,"arity":0},{"type":"def","source":"lib/rai_ex.ex:769","signature":[["list",[],"Elixir"]],"object_type":"FunctionObject","name":"work_peers_clear","module_id":"RaiEx","id":"work_peers_clear/1","doc":"Clear work peers node list until restart.\n\n*enable_control* must be set to true\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:740","signature":[["list",[],"Elixir"]],"object_type":"FunctionObject","name":"work_set","module_id":"RaiEx","id":"work_set/1","doc":"Set work for account in wallet.\n\n*enable_control* must be set to true\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:745","signature":[["wallet",[],null],["account",[],null],["work",[],null]],"object_type":"FunctionObject","name":"work_set","module_id":"RaiEx","id":"work_set/3","doc":null,"arity":3},{"type":"def","source":"lib/rai_ex.ex:777","signature":[["list",[],"Elixir"]],"object_type":"FunctionObject","name":"work_validate","module_id":"RaiEx","id":"work_validate/1","doc":"Check whether work is valid for block.\n","arity":1},{"type":"def","source":"lib/rai_ex.ex:780","signature":[["work",[],null],["hash",[],null]],"object_type":"FunctionObject","name":"work_validate","module_id":"RaiEx","id":"work_validate/2","doc":null,"arity":2},{"type":"def","source":"lib/rai_ex/block.ex:278","signature":[["map",[],null]],"object_type":"FunctionObject","name":"from_map","module_id":"RaiEx.Block","id":"from_map/1","doc":"Generates a `RaiEx.Block` struct from a map.\n","arity":1},{"type":"def","source":"lib/rai_ex/block.ex:262","signature":[["block",[],null]],"object_type":"FunctionObject","name":"open","module_id":"RaiEx.Block","id":"open/1","doc":"Opens a block.\n","arity":1},{"type":"def","source":"lib/rai_ex/block.ex:144","signature":[["block",[],null]],"object_type":"FunctionObject","name":"process","module_id":"RaiEx.Block","id":"process/1","doc":"Processes the block. Automatically invokes the correct processing function.\n","arity":1},{"type":"def","source":"lib/rai_ex/block.ex:248","signature":[["block",[],null]],"object_type":"FunctionObject","name":"recv","module_id":"RaiEx.Block","id":"recv/1","doc":"Receives a block.\n","arity":1},{"type":"def","source":"lib/rai_ex/block.ex:229","signature":[["block",[],null]],"object_type":"FunctionObject","name":"send","module_id":"RaiEx.Block","id":"send/1","doc":"Sends a block.\n","arity":1},{"type":"def","source":"lib/rai_ex/block.ex:152","signature":[["block",[],null],["priv_key",[],null],["\\\\",[],[["pub_key",[],null],null]]],"object_type":"FunctionObject","name":"sign","module_id":"RaiEx.Block","id":"sign/3","doc":"Signs the block. Automatically invokes the correct signing function.\n","arity":3},{"type":"def","source":"lib/rai_ex/block.ex:208","signature":[["block",[],null],["priv_key",[],null],["\\\\",[],[["pub_key",[],null],null]]],"object_type":"FunctionObject","name":"sign_open","module_id":"RaiEx.Block","id":"sign_open/3","doc":"Signs an open block.\n","arity":3},{"type":"def","source":"lib/rai_ex/block.ex:191","signature":[["block",[],null],["priv_key",[],null],["\\\\",[],[["pub_key",[],null],null]]],"object_type":"FunctionObject","name":"sign_recv","module_id":"RaiEx.Block","id":"sign_recv/3","doc":"Signs a receive block.\n","arity":3},{"type":"def","source":"lib/rai_ex/block.ex:167","signature":[["block",[],null],["priv_key",[],null],["\\\\",[],[["pub_key",[],null],null]]],"object_type":"FunctionObject","name":"sign_send","module_id":"RaiEx.Block","id":"sign_send/3","doc":"Signs a send block.\n","arity":3},{"type":"def","source":"lib/rai_ex/rpc.ex:74","signature":[["action",[],null],["list",[],null],["opts",[],null]],"object_type":"FunctionObject","name":"__build_keyword_func__","module_id":"RaiEx.RPC","id":"__build_keyword_func__/3","doc":false,"arity":3},{"type":"def","source":"lib/rai_ex/rpc.ex:89","signature":[["action",[],null],["list",[],null],["opts",[],null]],"object_type":"FunctionObject","name":"__build_seq_func__","module_id":"RaiEx.RPC","id":"__build_seq_func__/3","doc":false,"arity":3},{"type":"def","source":"lib/rai_ex/rpc.ex:60","signature":[["context",[],null],["keyword_list",[],null]],"object_type":"FunctionObject","name":"__named_args_from_keyword__","module_id":"RaiEx.RPC","id":"__named_args_from_keyword__/2","doc":false,"arity":2},{"type":"def","source":"lib/rai_ex/rpc.ex:67","signature":[["context",[],null],["keyword_list",[],null]],"object_type":"FunctionObject","name":"__seq_args_from_keyword__","module_id":"RaiEx.RPC","id":"__seq_args_from_keyword__/2","doc":false,"arity":2},{"type":"defmacro","source":"lib/rai_ex/rpc.ex:6","signature":[["opts",[],"Elixir"]],"object_type":"FunctionObject","name":"__using__","module_id":"RaiEx.RPC","id":"__using__/1","doc":false,"arity":1},{"type":"defmacro","source":"lib/rai_ex/rpc.ex:15","signature":[["name",[],null],["type",[],null],["\\\\",[],[["opts",[],null],[]]]],"object_type":"FunctionObject","name":"param","module_id":"RaiEx.RPC","id":"param/3","doc":"A macro for defining parameters and their types inside an rpc block.\n","arity":3},{"type":"defmacro","source":"lib/rai_ex/rpc.ex:29","signature":[["action",[],null],["list",[],"Elixir"]],"object_type":"FunctionObject","name":"rpc","module_id":"RaiEx.RPC","id":"rpc/2","doc":"A macro for generating rpc calling functions with validations.\n\n    rpc :account_remove do\n      param \"wallet\", :string\n      param \"account\", :string\n    end\n\nTransforms to a single function which takes arguments `wallet` and `account` in the *declared order*.\nAdditionally this function performs **type checking** on the arguments, e.g. If the first argument\n`wallet` does not pass the `:string` type check, an `ArgumentError` will be raised.\n\n","arity":2},{"type":"def","source":"lib/rai_ex/tools.ex:149","signature":[["address",[],null]],"object_type":"FunctionObject","name":"account_valid?","module_id":"RaiEx.Tools","id":"account_valid?/1","doc":"Calculates and compares the checksum on an address, returns a boolean.\n\n## Examples\n\n    iex> address_valid(\"xrb_34bmpi65zr967cdzy4uy4twu7mqs9nrm53r1penffmuex6ruqy8nxp7ms1h1\")\n    true\n\n    iex> address_valid(\"clearly not valid\")\n    false\n\n","arity":1},{"type":"def","source":"lib/rai_ex/tools.ex:181","signature":[["address",[],null]],"object_type":"FunctionObject","name":"address_to_public!","module_id":"RaiEx.Tools","id":"address_to_public!/1","doc":"Converts a raiblocks address to a public key.\n","arity":1},{"type":"def","source":"lib/rai_ex/tools.ex:189","signature":[["address",[],null]],"object_type":"FunctionObject","name":"address_to_public_without_trim!","module_id":"RaiEx.Tools","id":"address_to_public_without_trim!/1","doc":"Same as `RaiEx.Tools.address_to_public!` except leaves untrimmied 5 bytes at end of binary.\n","arity":1},{"type":"def","source":"lib/rai_ex/tools.ex:88","signature":[["wallet",[],null],["current_pwd",[],null],["password",[],null]],"object_type":"FunctionObject","name":"change_password","module_id":"RaiEx.Tools","id":"change_password/3","doc":"Changes the password for the `wallet`.\n\n## Examples\n\n    iex> change_password(wallet, current_pwd, new_pwd)\n    {:ok, wallet}\n\n    iex> change_password(wallet, invalid_pwd, new_pwd)\n    {:error, reason}\n\n","arity":3},{"type":"def","source":"lib/rai_ex/tools.ex:203","signature":[["pub_key",[],null]],"object_type":"FunctionObject","name":"create_account!","module_id":"RaiEx.Tools","id":"create_account!/1","doc":"Creates an address from the given *public key*. The address is encoded in\nbase32 as defined in `RaiEx.Tools.Base32` and appended with a checksum.\n\n## Examples\n\n    iex> create_account!(<<125, 169, 163, 231, 136, 75, 168, 59, 83, 105, 128, 71, 82, 149, 53, 87, 90, 35, 149, 51, 106, 243, 76, 13, 250, 28, 59, 128, 5, 181, 81, 116>>)\n    \"xrb_1zfbnhmrikxa9fbpm149cccmcott6gcm8tqmbi8zn93ui14ucndn93mtijeg\"\n\n    iex> create_address!(\"7DA9A3E7884BA83B53698047529535575A2395336AF34C0DFA1C3B8005B55174\")\n    \"xrb_1zfbnhmrikxa9fbpm149cccmcott6gcm8tqmbi8zn93ui14ucndn93mtijeg\"\n\n","arity":1},{"type":"def","source":"lib/rai_ex/tools.ex:237","signature":[["priv_key",[],null]],"object_type":"FunctionObject","name":"derive_public!","module_id":"RaiEx.Tools","id":"derive_public!/1","doc":"Derives the public key from the private key.\n\n## Examples\n\n    iex> derive_public!(<<84, 151, 51, 84, 136, 206, 7, 211, 66, 222, 10, 240, 159, 113, 36, 98, 93, 238, 29, 96, 95, 8, 33, 62, 53, 162, 139, 52, 75, 123, 38, 144>>)\n    <<125, 169, 163, 231, 136, 75, 168, 59, 83, 105, 128, 71, 82, 149, 53, 87, 90, 35, 149, 51, 106, 243, 76, 13, 250, 28, 59, 128, 5, 181, 81, 116>>\n\n    iex> derive_public!(\"5497335488CE07D342DE0AF09F7124625DEE1D605F08213E35A28B344B7B2690\")\n    <<125, 169, 163, 231, 136, 75, 168, 59, 83, 105, 128, 71, 82, 149, 53, 87, 90, 35, 149, 51, 106, 243, 76, 13, 250, 28, 59, 128, 5, 181, 81, 116>>\n\n","arity":1},{"type":"def","source":"lib/rai_ex/tools.ex:139","signature":[["wallet",[],null]],"object_type":"FunctionObject","name":"lock_wallet","module_id":"RaiEx.Tools","id":"lock_wallet/1","doc":"Locks the given wallet.\n","arity":1},{"type":"def","source":"lib/rai_ex/tools.ex:72","signature":[["arg",[],"Elixir"],["sent_hash",[],null]],"object_type":"FunctionObject","name":"open_account","module_id":"RaiEx.Tools","id":"open_account/2","doc":null,"arity":2},{"type":"def","source":"lib/rai_ex/tools.ex:39","signature":[["arg",[],"Elixir"]],"object_type":"FunctionObject","name":"process_all_pending","module_id":"RaiEx.Tools","id":"process_all_pending/1","doc":null,"arity":1},{"type":"def","source":"lib/rai_ex/tools.ex:12","signature":[],"object_type":"FunctionObject","name":"seed","module_id":"RaiEx.Tools","id":"seed/0","doc":"Generates a wallet seed.\n","arity":0},{"type":"def","source":"lib/rai_ex/tools.ex:256","signature":[["seed",[],null],["nonce",[],null]],"object_type":"FunctionObject","name":"seed_account!","module_id":"RaiEx.Tools","id":"seed_account!/2","doc":"Generates the public and private keys for a given *wallet*.\n\n## Examples\n\n    iex> seed_account!(\"8208BD79655E7141DCFE792084AB6A8FDFFFB56F37CE30ADC4C2CC940E276A8B\", 0)\n    {pub, priv}\n\n","arity":2},{"type":"def","source":"lib/rai_ex/tools.ex:19","signature":[["arg",[],"Elixir"],["to",[],null],["amount",[],null]],"object_type":"FunctionObject","name":"send","module_id":"RaiEx.Tools","id":"send/3","doc":"Sends a certain amount of RAW to `to`.\n","arity":3},{"type":"def","source":"lib/rai_ex/tools.ex:125","signature":[["wallet",[],null],["password",[],null]],"object_type":"FunctionObject","name":"unlock_wallet","module_id":"RaiEx.Tools","id":"unlock_wallet/2","doc":"Unlocks the given wallet with its `password`.\n","arity":2},{"type":"def","source":"lib/rai_ex/tools.ex:116","signature":[["wallet",[],null]],"object_type":"FunctionObject","name":"wallet_add_adhoc","module_id":"RaiEx.Tools","id":"wallet_add_adhoc/1","doc":"Inserts a new adhoc key into `wallet`.\n","arity":1},{"type":"def","source":"lib/rai_ex/tools.ex:106","signature":[["password",[],null]],"object_type":"FunctionObject","name":"wallet_create_encrypted","module_id":"RaiEx.Tools","id":"wallet_create_encrypted/1","doc":"Creates a new encrypted wallet. Locks it with `password`.\n","arity":1},{"type":"def","source":"lib/rai_ex/tools/base_32.ex:20","signature":[["binary",[],null]],"object_type":"FunctionObject","name":"binary_valid?","module_id":"RaiEx.Tools.Base32","id":"binary_valid?/1","doc":"Returns true if the binary can be encoded into base32.\n","arity":1},{"type":"def","source":"lib/rai_ex/tools/base_32.ex:109","signature":[],"object_type":"FunctionObject","name":"character_mappings","module_id":"RaiEx.Tools.Base32","id":"character_mappings/0","doc":"Returns a duplexed map of **character <-> bitstring** mappings.\n\n## Example\n\n    %{\"1\" => <<0::size(5)>>, <0::size(5)>> => \"1\"}\n\n","arity":0},{"type":"def","source":"lib/rai_ex/tools/base_32.ex:45","signature":[["string",[],null]],"object_type":"FunctionObject","name":"decode","module_id":"RaiEx.Tools.Base32","id":"decode/1","doc":"Same as `decode!`, except returns a results tuple.\n\n## Examples\n\n    iex> decode(\"34bmipzf\")\n    {:ok, <<8, 147, 56, 91, 237>>}\n\n    iex> decode(\"bmg2\")\n    {:error, :badarg}\n\n","arity":1},{"type":"def","source":"lib/rai_ex/tools/base_32.ex:25","signature":[["string",[],null]],"object_type":"FunctionObject","name":"decode!","module_id":"RaiEx.Tools.Base32","id":"decode!/1","doc":"Decodes a base32 string into its bitstring form.\n\nRaises `ArgumentError` if the string is invalid.\n\n## Examples\n\n    iex> decode!(\"34bmipzf\")\n    <<8, 147, 56, 91, 237>>\n\n    iex> decode!(\"bmg2\")\n    ** (Elixir.ArgumentError)\n    \n","arity":1},{"type":"def","source":"lib/rai_ex/tools/base_32.ex:89","signature":[["bitstring",[],null]],"object_type":"FunctionObject","name":"encode","module_id":"RaiEx.Tools.Base32","id":"encode/1","doc":"Same as `encode!`, except returns a results tuple.\n\n## Examples\n\n    iex> encode(<<8, 147, 56, 91, 237>>)\n    {:ok, \"34bmipzf\"}\n\n    iex> encode(<<8, 5>>)\n    {:error, :badarg}\n\n","arity":1},{"type":"def","source":"lib/rai_ex/tools/base_32.ex:65","signature":[["bitstring",[],null],["\\\\",[],[["acc",[],null],""]]],"object_type":"FunctionObject","name":"encode!","module_id":"RaiEx.Tools.Base32","id":"encode!/2","doc":"Encodes a bitstring/binary into its base32 form.\n\nRaises `ArgumentError` if the bitstring/binary is invalid.\n\n## Examples\n\n    iex> encode(<<8, 147, 56, 91, 237>>)\n    \"34bmipzf\"\n\n    iex> encode(<<8, 5>>)\n    ** (Elixir.ArgumentError)\n\n","arity":2},{"type":"def","source":"lib/rai_ex/tools/validator.ex:72","signature":[["_",[],"Elixir"]],"object_type":"FunctionObject","name":"any","module_id":"RaiEx.Tools.Validator","id":"any/1","doc":false,"arity":1},{"type":"def","source":"lib/rai_ex/tools/validator.ex:54","signature":[["addr",[],null]],"object_type":"FunctionObject","name":"is_address","module_id":"RaiEx.Tools.Validator","id":"is_address/1","doc":false,"arity":1},{"type":"def","source":"lib/rai_ex/tools/validator.ex:62","signature":[["addr_list",[],null]],"object_type":"FunctionObject","name":"is_address_list","module_id":"RaiEx.Tools.Validator","id":"is_address_list/1","doc":false,"arity":1},{"type":"def","source":"lib/rai_ex/tools/validator.ex:49","signature":[["wallet",[],null]],"object_type":"FunctionObject","name":"is_hash","module_id":"RaiEx.Tools.Validator","id":"is_hash/1","doc":false,"arity":1},{"type":"def","source":"lib/rai_ex/tools/validator.ex:67","signature":[["hash_list",[],null]],"object_type":"FunctionObject","name":"is_hash_list","module_id":"RaiEx.Tools.Validator","id":"is_hash_list/1","doc":false,"arity":1},{"type":"def","source":"lib/rai_ex/tools/validator.ex:20","signature":[["should_be",[],null],["is",[],null]],"object_type":"FunctionObject","name":"validate_types!","module_id":"RaiEx.Tools.Validator","id":"validate_types!/2","doc":"Validates the type types used by `RaiEx.RPC`. Raises `ArgumentError`\nif the types fail to validate.\n\n## Examples\n\n    iex> validate_types([\"account\" => :string, \"count\" => :integer], [\"account\" => \"xrb_34bmpi65zr967cdzy4uy4twu7mqs9nrm53r1penffmuex6ruqy8nxp7ms1h1, \"count\" => 5])\n    :ok\n\n    iex> validate_types([\"account\" => :string, \"count\" => :integer], [\"account\" => \"xrb_34bmpi65zr967cdzy4uy4twu7mqs9nrm53r1penffmuex6ruqy8nxp7ms1h1, \"count\" => \"10\"])\n    ** (Elixir.ArgumentError)\n\n","arity":2}],"language":"elixir","git_repo_url":"https://github.com/willHol/rai_ex.git","client_version":"0.5.6","client_name":"inch_ex","branch_name":"master","args":[]}